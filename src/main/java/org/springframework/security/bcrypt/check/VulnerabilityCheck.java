package org.springframework.security.bcrypt.check;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * A tool for checking if a given hash is vulnerable and updating passwords accordingly
 */
public final class VulnerabilityCheck {
    private static final Pattern BCRYPT_PATTERN = Pattern.compile("\\A\\$2(a|y|b)?\\$(\\d\\d)\\$[./0-9A-Za-z]{53}");

    public static boolean isHashVulnerable(String hash) {
        if (hash == null) {
            return false;
        }
        Matcher matcher = BCRYPT_PATTERN.matcher(removePrefix(hash));
        if (!matcher.matches()) {
            return false;
        }
        return Integer.parseInt(matcher.group(2)) == 31;
    }

    private static String removePrefix(String hash) {
        return hash.startsWith("{bcrypt}") ? hash.substring(8) : hash;
    }

    public static String correctHash(String encoding) {
        if (!isHashVulnerable(encoding)) {
            return null;
        }
        int indexOfLogRounds = encoding.length() - 56;
        String corrected = encoding.substring(0, indexOfLogRounds) + "00" + encoding.substring(indexOfLogRounds + 2);
        return corrected;
    }

    private VulnerabilityCheck() {

    }


}
