package org.springframework.security.bcrypt.check;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.StreamSupport;

import org.springframework.security.bcrypt.hashes.PasswordHash;
import org.springframework.security.bcrypt.hashes.PasswordHashRepository;

public class CheckCommand {
	private static final Pattern BCRYPT_PATTERN = Pattern.compile("\\A\\$2(a|y|b)?\\$(\\d\\d)\\$[./0-9A-Za-z]{53}");

	private final PasswordHashRepository<? extends PasswordHash> hashes;
	private final CheckView view;

	public CheckCommand(PasswordHashRepository<? extends PasswordHash> hashes, CheckView view) {
		this.hashes = hashes;
		this.view = view;
	}

	public void run() {
		boolean anyNeedUpdating = StreamSupport.stream(this.hashes.findAll().spliterator(), false).anyMatch(this::needsUpdating);
		if (anyNeedUpdating) {
			this.view.updatesNeeded();
		} else {
			this.view.noUpdatesNeeded();
		}
	}

	private boolean needsUpdating(PasswordHash passwordHash) {
		String hash = passwordHash.getPasswordHash();
		if (hash == null) {
			return false;
		}
		if (hash.startsWith("{bcrypt}")) {
			hash = hash.substring(8);
		}
		Matcher matcher = BCRYPT_PATTERN.matcher(hash);
		if (!matcher.matches()) {
			return false;
		}
		return Integer.parseInt(matcher.group(2)) == 31;
	}
}
