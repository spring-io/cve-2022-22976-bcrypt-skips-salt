package org.springframework.security.bcrypt;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.bcrypt.check.CheckCommand;
import org.springframework.security.bcrypt.check.CheckView;
import org.springframework.security.bcrypt.check.ConsoleCheckView;
import org.springframework.security.bcrypt.hashes.InMemoryPasswordHash;
import org.springframework.security.bcrypt.hashes.InMemoryPasswordHashRepository;
import org.springframework.security.bcrypt.hashes.PasswordHashRepository;
import org.springframework.security.bcrypt.update.ConsoleUpdateView;
import org.springframework.security.bcrypt.update.UpdateCommand;
import org.springframework.security.bcrypt.update.UpdateView;

@Configuration
public class AppConfig {
	private final PasswordHashRepository hashes;

	public AppConfig(Optional<PasswordHashRepository> optional) {
		this.hashes = optional.orElseGet(() -> {
			System.err.printf("\u001b[91m========================================================================\u001b[0m%n");
			System.err.printf("\u001b[91mYou are using the in-memory password repository that ships with this tool.\u001b[0m%n%n");
			System.err.printf("\u001b[91mThat means that 'check' is not actually checking your passwords, and%n'update' is not updating any of your password hashes.\u001b[0m%n%n");
			System.err.printf("\u001b[91mTo check and update your password hashes, please implement the%nPasswordHashRepository and PasswordHash classes.\u001b[0m%n");
			System.err.printf("\u001b[91m========================================================================\u001b[0m%n");
			InMemoryPasswordHashRepository hashes = new InMemoryPasswordHashRepository();
			hashes.save(new InMemoryPasswordHash(1L, "{bcrypt}$2a$31$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue"));
			hashes.save(new InMemoryPasswordHash(2L, "{bcrypt}$2a$12$EfLupGypIqdNaPvfX3tbuOrokQjUq.u/rMAcRL32bzcqDOZQuSTM6"));
			hashes.save(new InMemoryPasswordHash(3L, "{bcrypt}$2a$10$V0suUo3.5HspfFrtI.C5xuUXnWlNgVtudZB5JbSFMpYvqb4Hlcc0y"));
			hashes.save(new InMemoryPasswordHash(4L, "{bcrypt}$2a$07$.9mDR3QZD.9pPUlLamDlJ.ga6vxG9euUZDTajoMVjLEXPXfSle.ge"));
			hashes.save(new InMemoryPasswordHash(5L, "{pbkdf2}4a9fb8f46d0aac515e5f069f05721712c3ca28d0bbc59a5b778b2505fd8fc565104acf090e3b4f95"));
			hashes.save(new InMemoryPasswordHash(6L, "$2a$31$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue"));
			hashes.save(new InMemoryPasswordHash(7L, "$2a$12$EfLupGypIqdNaPvfX3tbuOrokQjUq.u/rMAcRL32bzcqDOZQuSTM6"));
			hashes.save(new InMemoryPasswordHash(8L, "$2a$10$V0suUo3.5HspfFrtI.C5xuUXnWlNgVtudZB5JbSFMpYvqb4Hlcc0y"));
			hashes.save(new InMemoryPasswordHash(9L, "$2a$07$.9mDR3QZD.9pPUlLamDlJ.ga6vxG9euUZDTajoMVjLEXPXfSle.ge"));
			hashes.save(new InMemoryPasswordHash(10L, "4a9fb8f46d0aac515e5f069f05721712c3ca28d0bbc59a5b778b2505fd8fc565104acf090e3b4f95"));
			return hashes;
		});
	}

	@Bean
	CheckView checkView() {
		return new ConsoleCheckView();
	}

	@Bean
	CheckCommand check(CheckView checkView) {
		return new CheckCommand(this.hashes, checkView);
	}

	@Bean
	UpdateView updateView() {
		return new ConsoleUpdateView();
	}

	@Bean
	UpdateCommand update(UpdateView updateView) {
		return new UpdateCommand(this.hashes, this.hashes, updateView);
	}

	@Bean
	CommandLineRunner commands(CheckCommand check, UpdateCommand update) {
		return new Commands(check, update);
	}
}
