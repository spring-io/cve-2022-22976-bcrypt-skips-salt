package org.springframework.security.bcrypt.check;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityCheckTests {
    @Test
    void isHashVulerableWhenPrefixedVulnerableThenTrue() {
        String hash = "{bcrypt}$2a$31$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue";
        assertThat(VulnerabilityCheck.isHashVulnerable(hash)).isTrue();
    }

    @Test
    void isHashVulerableWhenVulnerableThenTrue() {
        String hash = "$2a$31$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue";
        assertThat(VulnerabilityCheck.isHashVulnerable(hash)).isTrue();
    }

    @Test
    void isHashVulnerableWhenPrefixedNotVulernableThenFalse() {
        String hash = "{bcrypt}$2a$12$EfLupGypIqdNaPvfX3tbuOrokQjUq.u/rMAcRL32bzcqDOZQuSTM6";
        assertThat(VulnerabilityCheck.isHashVulnerable(hash)).isFalse();
    }

    @Test
    void isHashVulnerableWhenNotVulernableThenFalse() {
        String hash = "$2a$12$EfLupGypIqdNaPvfX3tbuOrokQjUq.u/rMAcRL32bzcqDOZQuSTM6";
        assertThat(VulnerabilityCheck.isHashVulnerable(hash)).isFalse();
    }

    @Test
    void isHashVulnerableWhenPrefixNotBcryptThenFalse() {
        String hash = "{pbkdf2}4a9fb8f46d0aac515e5f069f05721712c3ca28d0bbc59a5b778b2505fd8fc565104acf090e3b4f95";
        assertThat(VulnerabilityCheck.isHashVulnerable(hash)).isFalse();
    }

    @Test
    void isHashVulnerableWhenNotBcryptThenFalse() {
        String hash = "4a9fb8f46d0aac515e5f069f05721712c3ca28d0bbc59a5b778b2505fd8fc565104acf090e3b4f95";
        assertThat(VulnerabilityCheck.isHashVulnerable(hash)).isFalse();
    }

    @Test
    void correctHashWhenPrefixedVulnerableThenTrue() {
        String hash = "{bcrypt}$2a$31$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue";
        assertThat(VulnerabilityCheck.correctHash(hash))
                .isEqualTo("{bcrypt}$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue");
    }

    @Test
    void correctHashWhenVulnerableThenTrue() {
        String hash = "$2a$31$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue";
        assertThat(VulnerabilityCheck.correctHash(hash))
                .isEqualTo("$2a$00$9N8N35BVs5TLqGL3pspAte5OWWA2a2aZIs.EGp7At7txYakFERMue");
    }

    @Test
    void correctHashWhenPrefixedNotVulernableThenFalse() {
        String hash = "{bcrypt}$2a$12$EfLupGypIqdNaPvfX3tbuOrokQjUq.u/rMAcRL32bzcqDOZQuSTM6";
        assertThat(VulnerabilityCheck.correctHash(hash)).isNull();
    }

    @Test
    void correctHashWhenNotVulernableThenFalse() {
        String hash = "$2a$12$EfLupGypIqdNaPvfX3tbuOrokQjUq.u/rMAcRL32bzcqDOZQuSTM6";
        assertThat(VulnerabilityCheck.correctHash(hash)).isNull();
    }

    @Test
    void correctHashWhenPrefixNotBcryptThenFalse() {
        String hash = "{pbkdf2}4a9fb8f46d0aac515e5f069f05721712c3ca28d0bbc59a5b778b2505fd8fc565104acf090e3b4f95";
        assertThat(VulnerabilityCheck.correctHash(hash)).isNull();
    }

    @Test
    void correctHashWhenNotBcryptThenFalse() {
        String hash = "4a9fb8f46d0aac515e5f069f05721712c3ca28d0bbc59a5b778b2505fd8fc565104acf090e3b4f95";
        assertThat(VulnerabilityCheck.correctHash(hash)).isNull();
    }
}
